module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input usb_rx,
    input io_button[5],
    input io_dip[2][8],
    output usb_tx,
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield    
    output io_led[3][8]
    
      ) {
  sig rst, segValue[15], outChecker[16];
  //counter slowclock(#SIZE(1), #DIV(2), .clk(clk), .rst(rst));
  //button_controller buttons(.clk(slowclock.value));
  //input_fsm system_fsm(.clk(slowclock.value),.rst(rst));
  .clk(clk) {
    reset_conditioner reset_cond;
    button_controller buttons;
    .rst(rst){
      counter seven_seg_counter(#SIZE(2), #DIV(10));
      input_fsm system_fsm;
      }
    }
  seven_seg_select_digit digit(.in(seven_seg_counter.value));//Declare the selector for the seven segment digit position
  seven_seg_select_value seven_value(.in(seven_seg_counter.value), .value(segValue));
  always {
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out; // conditioned reset
    
    usb_tx = usb_rx; //loop serial port
    
    buttons.io_button = io_button;
    outChecker[15:8] = io_dip[1];
    outChecker[7:0] = io_dip[0];
    
    system_fsm.oneInput = buttons.oneInput;
    system_fsm.zeroInput = buttons.zeroInput;
    system_fsm.nextValue = buttons.nextValueInput;
    system_fsm.enterNext = buttons.enterInput;
    system_fsm.previousValue = buttons.previousValueInput;
    system_fsm.outChecker = outChecker;
    
    segValue = system_fsm.segValue;
    
    io_led[2][5:0] = system_fsm.alufn_signal;
    io_led[1] = system_fsm.out[15:8];
    io_led[0] = system_fsm.out[7:0];
    
    
    io_seg = seven_value.out;//Assign the value to the seven segment
    io_sel = digit.out;//Assign the selected digit position for the respective value;
  }
}