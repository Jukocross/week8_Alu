module alufn_signal_fsm(
    input clk,  // clock
    input rst,
    output out[6] // alufn signals
  ) {
  
  .clk(clk){
    fsm testAluFsm={ADD, SUB, AND, OR, XOR, A, NAND, NOR, XNOR, NOTA, B, NOTB, SHL, SHR, SRA, CMPEQ, CMPLT, CMPLE, MUL, ERROR}; 
  }

  always {
  
    if (rst & 1){
        testAluFsm.d = testAluFsm.ADD;
    }
    else{
        testAluFsm.d = testAluFsm.q;
    }
    out = 6b0;
    case(testAluFsm.q){
      testAluFsm.ADD : 
              out = b000000;
              testAluFsm.d = testAluFsm.SUB;
      testAluFsm.SUB : 
              out = b000001;
              testAluFsm.d = testAluFsm.MUL;
      testAluFsm.MUL :
              out = b000010;
              testAluFsm.d = testAluFsm.AND;
      testAluFsm.AND : 
              out = b011000;
              testAluFsm.d = testAluFsm.NAND;
      testAluFsm.NAND:
              out = b011001;
              testAluFsm.d = testAluFsm.OR;  
      testAluFsm.OR : 
              out = b011110;
              testAluFsm.d = testAluFsm.NOR;
      testAluFsm.NOR:
              out = b011111;
              testAluFsm.d = testAluFsm.XOR;        
      testAluFsm.XOR : 
              out = b010110;
              testAluFsm.d = testAluFsm.XNOR;
      testAluFsm.XNOR:
              out = b010111;
              testAluFsm.d = testAluFsm.A;        
      testAluFsm.A : 
              out = b011010;
              testAluFsm.d = testAluFsm.NOTA;
      testAluFsm.NOTA:
              out = b011011;
              testAluFsm.d = testAluFsm.B;
      testAluFsm.B : 
              out = b011100;
              testAluFsm.d = testAluFsm.NOTB;
      testAluFsm.NOTB:
              out = b011101;
              testAluFsm.d = testAluFsm.SHL;        
      testAluFsm.SHL : 
              out = b100000;
              testAluFsm.d = testAluFsm.SHR;        
      testAluFsm.SHR : 
              out = b100001;
              testAluFsm.d = testAluFsm.SRA;        
      testAluFsm.SRA : 
              out = b100011;
              testAluFsm.d = testAluFsm.CMPEQ; 
      testAluFsm.CMPEQ : 
              out = b110011;
              testAluFsm.d = testAluFsm.CMPLT;
      testAluFsm.CMPLT : 
              out = b110101;
              testAluFsm.d = testAluFsm.CMPLE;        
      testAluFsm.CMPLE : 
              out = b110111;
              testAluFsm.d = testAluFsm.ERROR;
      testAluFsm.ERROR :
              out = b000100;
              testAluFsm.d = testAluFsm.ADD;
      default:
              out = b000000;
              testAluFsm.d = testAluFsm.ADD;      
                          
    }
  }
}